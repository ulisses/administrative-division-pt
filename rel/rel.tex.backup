\documentclass[11pt,a4paper]{article}
\usepackage{graphicx}
\usepackage{alltt}
\usepackage[portuges]{babel}
\usepackage[utf8x]{inputenc}
\usepackage{color}
\usepackage{fancyhdr}
\usepackage{listings}
\usepackage{multicol}

\setlength{\textwidth}{16.5cm}
\setlength{\textheight}{24cm}
\setlength{\parindent}{1em}
\setlength{\parskip}{0pt plus 1pt}
\setlength{\oddsidemargin}{0cm}
\setlength{\evensidemargin}{0cm}
\setlength{\topmargin}{-1.1cm}
\setlength{\headsep}{20pt}
\setlength{\columnsep}{1.5pc}
\setlength\columnseprule{.4pt}
\setlength\premulticols{6\baselineskip}
\pagestyle{fancy}

\definecolor{castanho_ulisses}{rgb}{0.71,0.33,0.14}
\definecolor{gray_ulisses}{gray}{0.55}
\definecolor{green_ulises}{rgb}{0.2,0.75,0}

\lstdefinelanguage{C_ulisses}
{
	basicstyle=\ttfamily\scriptsize,
	%backgroundcolor=\color{yellow},
% 	frameshape={RYRYNYYYY}{yny}{yny}{RYRYNYYYY}, %contornos... muito nice...
	sensitive=true,
	morecomment=[l][\color{gray_ulisses}\scriptsize]{//},
	morecomment=[s][\color{gray_ulisses}\scriptsize]{/*}{*/},
	morestring=[b]",
	morestring=[b]',
	stringstyle=\color{red},
	showstringspaces=false,
% 	firstnumber=\thelstnumber,
	numbers=left,
	numberstyle=\tiny,
	numberblanklines=true,
	showspaces=false,
	showtabs=false,
	xleftmargin=-10pt,
	xrightmargin=-20pt,
	%% funcoes predefinidas...
	emph=
	{[1]
		return,printf,fprintf,if,else,scanf,sscanf,sprintf,malloc,
		calloc,realloc,fgets,fputs,puts,system,strcmp,strstr,
		strchr,exit,for,while,fclose,fopen,atoi,sizeof,sin,cos
		%% e muitos mais que a medida que sejam necessrios irei adicionar...
	},
	emphstyle={[1]\color{blue}\textbf},
	%% tipos de dados e nao so... >mais enph's<;
	emph={[2]char,float,double,void,NULL,int,bool},
	emphstyle={[2]\color{green_ulises}\textbf},
	emph={[3]typedef, struct},
	emphstyle={[3]\color{castanho_ulisses}\textbf}
}

\lstdefinelanguage{txt}
{
       basicstyle=\ttfamily\scriptsize,
       showstringspaces=false,
       numbers=left,
       numberstyle=\tiny,
       numberblanklines=true,
       showspaces=false,
       showtabs=false
}
\lstnewenvironment{code_txt}{\lstset{language=txt}}{}
\lstnewenvironment{code_c}{\lstset{language=C_ulisses}}{}

\lstnewenvironment{code_lex}
{\textbf{Código Lex} \hspace{1cm} \hrulefill \lstset{language=txt}}
{\hrule\smallskip}

\title{\sf  Processamento de Linguagens \\
\begin{tabular}{c}
    \includegraphics[width=.1\textwidth]{stuff/uminho.jpg}
    \includegraphics[width=.07\textwidth]{stuff/informatica.jpg}\\
    {\small Universidade do Minho}, {\small LEI}\\
    {\small Ano lectivo 2007/2008}\\
    {\small Trabalho Prático N$º$2}\\
\end{tabular}
}
\author{
    {\small Luis Tiago Mascarenhas - 38172} \and
    {\small Mário Ulisses Pires Araujo Costa - 43175} \and
    {\small Vasco Almeida Ferreira - 43207}}
\date{{\small \today}}

\begin{document}
\maketitle

\begin{abstract}
O intuito deste trabalho é demonstrar os conhecimentos obtidos sobre o par gerador de compiladores \textsf{lex/yacc} na geração de parsers utilizando Gramáticas Tradutoras.
\end{abstract}

\tableofcontents

\section{Introdu\c c\~ao}
O trabalho consiste na geração de um site para as localidades de Portugal face às hierarquias geográficas definidas à custa de uma linguagem (\textsf{OrgGeo}).

Apresentamos de seguinda a gramática dessa linguagem:
\begin{code_txt}
OrGeo     --> Distritos
          
Distritos --> Distrito '|'
          | Distritos Distrito '|'
          
Distrito  --> IdD Link Concelhos
          
Concelhos --> Concelho
          | Concelhos '' Concelho
          
Concelho  --> Locais '!' IdC Link
          
Locais    --> Local
          | Locais ',' Local
          
Link      --> '>' l
          
IdD       --> id
          
IdC       --> id
          
Local     --> IdL Link
          
IdL       --> id
          
\end{code_txt}

\section{Descrição do Problema}
Como queriamos um ficheiro de grande dimensão para testar e também ter um resultado mais interessante e fiável decidimos começar este trabalho por fazer um programa em \textsf{C} que gerasse um ficheiro que encaixe na gramática acima descrita.\\
Inicialmente precisavamos de uma ``base de dados`` que tivesse, com grande fidelidade todas as freguesias de Portugal; descobrimos um pack de 3 ficheiros no site dos CTT (Correios), que passamos a descrever de seguida:

Ficheiro \textbf{distritos.txt} ($28$ linhas)\\
\begin{code_txt}
ID_DISTRITO1:NOME_DISTRITO1
.
.
.
ID_DISTRITOn:NOME_DISTRITOn
\end{code_txt}

exemplo:\\

\begin{code_txt}
03;Braga
04;Braganca
05;Castelo Branco
06;Coimbra
\end{code_txt}

Ficheiro \textbf{concelhos.txt} ($307$ linhas)\\
\begin{code_txt}
ID_DISTRITO:ID_CONCELHO1:NOME_CONCELHO1
.
.
.
ID_DISTRITO:ID_CONCELHOn:NOME_CONCELHOn
\end{code_txt}

exmplo:\\

\begin{code_txt}
18;10;Oliveira de Frades
18;11;Penalva do Castelo
18;12;Penedono
18;13;Resende
18;14;Santa Comba Dao
18;15;Sao Joao da Pesqueira
18;16;Sao Pedro do Sul
\end{code_txt}

Ficheiro \textbf{todos\_cp.txt} tem informação referente a todos os códigos postais do país ($274537$ linhas)\\
\begin{code_txt}
ID_DISTRITO;ID_CONCELHO;ID_FREGUESIA1;NOME_FREGUESIA1;.+
.
.
.
ID_DISTRITO;ID_CONCELHO;ID_FREGUESIAn;NOME_FREGUESIAn;.+
\end{code_txt}

exemplo:\\

\begin{code_txt}
01;01;249;Alcafaz;;;;;;;;;;;3750;011;AGADAO
01;01;250;Caselho;;;;;;;;;;;3750;012;AGADAO
01;01;251;Corga da Serra;;;;;;;;;;;3750;013;AGADAO
01;01;252;Foz;;;;;;;;;;;3750;014;AGADAO
01;01;253;Guistola;;;;;;;;;;;3750;015;AGADAO
01;01;254;Guistolinha;;;;;;;;;;;3750;016;AGADAO
01;01;255;Lomba;;;;;;;;;;;3750;017;AGADAO
01;01;256;Povinha;;;;;;;;;;;3750;018;AGADAO
01;01;257;Vila Mendo;;;;;;;;;;;3750;019;AGADAO
01;01;60359;Felgueira;;;;;;;;;;;3750;020;AGADAO
01;01;60560;Boa Aldeia;;;;;;;;;;;3750;021;AGADAO
\end{code_txt}

Nesta fase não escolhemos fazer com o Lex pois pareceu-nos que iamos usar um tanque de guerra para matar uma formiga.

\subsection{Optimização da ''base de dados``}

Como queriamos ter informação sobre cada localidade de Portugal decidimos que teriamos que ter links para a Wikipedia, pois só esta teria a informação mais fiel e completa que conseguiamos ''encontrar``.\\

Aproveitamos os conhecimentos ganhos com o primeiro trabalho, sobre o conhecimento dos links da Wikipedia, para usar o dump que tinhamos usado na primeira fase. Detectamos alguns padrões:

Para os Distritos:
\begin{itemize}
 \item Distito\_d[eao]\_NOMEDISTRITO
\end{itemize}

Para os Concelhos:
\begin{itemize}
 \item NOMECONCELHO
 \item NOMECONCELHO\_(Concelho)
\end{itemize}

Para os Distritos:
\begin{itemize}
 \item NOMEFREGUESIA
 \item NOMEFREGUESIA\_(freguesia)
 \item NOMEFREGUESIA\_(CONCELHO\_A\_QUE\_PERTENCE)
\end{itemize}

Inicialmente pensamos em fazer o download de cada página da Wikipedia com os nomes das localidades do ficheiro dos CTT, mas iriamos perder muito mais tempo, possivelmente iria ser bem mais fiel, mas impraticável.\\

Decidimos usar o dump da Wikipedia, um ficheiro com 2.1Gb (perto de 2 milhões de linhas) e através do comando:

\begin{code_txt}
 cat wikipediaPT.xml | grep "<title>.*</title>" | \
                       sed '/.*[!"#\$&:%;,=*+|0-9].*$/d' | \
                       sed -e '/[A-Z][A-Z].*/d' > titles.txt
\end{code_txt}

Sacamos só os titulos (link) de cada artigo, eliminamos também tudas as entradas que tinham números, alguns sinais de pontuação entre outras optimizações. Desta forma geramos o ficheiro \textsf{titles.txt} com $645012$ linhas, bem mais pequeno do que o que tinhamos inicialmente.\\

Tudo isto para, no programa em C podermos procurar se determinada localidade tem uma entrada na Wikipedia. Isto é feito utilizando um simples \textsf{system} do C, decidimos utilizar este método (nada inteligente) pois tentamos previamente fazer uma solução com \textsf{forks}, mas estes demoravam mais tempo a ser criados do que a fazer realmente trabalho útil.\\

Assim sendo, com a ajuda deste programa conseguimos ter um ficheiro que respeita a gramática em cima anunciada;

\begin{code_txt}
Beja>http://pt.wikipedia.org/wiki/Distrito_de_Beja
	Aljustrel>http://pt.wikipedia.org/wiki/Aljustrel_(freguesia),
        Carregueiro>http://pt.wikipedia.org/wiki/Carregueiro,
        Corte Vicente Anes>http://pt.wikipedia.org/wiki/Corte_Vicente_Anes,
        Estacao Caminhos de Ferro>http://pt.wikipedia.org/wiki/Estacao_Caminhos_de_Ferro,
        Focinho de Cao>http://pt.wikipedia.org/wiki/Focinho_de_Cao,
.
.
.
	!Aljustrel>http://pt.wikipedia.org/wiki/Aljustrel;
	Almodovar>http://pt.wikipedia.org/wiki/Almodovar_(freguesia),
        Candenilhas>http://pt.wikipedia.org/wiki/Candenilhas,
        Cerca da Junqueira>http://pt.wikipedia.org/wiki/Cerca_da_Junqueira,
        Corte de Baixo>http://pt.wikipedia.org/wiki/Corte_de_Baixo,
        Corte Zorrinho>http://pt.wikipedia.org/wiki/Corte_Zorrinho,
        Corvatos>http://pt.wikipedia.org/wiki/Corvatos,
.
.
.
	!Vidigueira>http://pt.wikipedia.org/wiki/Vidigueira|

Aveiro>http://pt.wikipedia.org/wiki/Distrito_de_Aveiro
	Alcafaz>http://pt.wikipedia.org/wiki/Alcafaz,
        Caselho>http://pt.wikipedia.org/wiki/Caselho,
        Corga da Serra>http://pt.wikipedia.org/wiki/Corga_da_Serra,
        Foz>http://pt.wikipedia.org/wiki/Foz,
        Guistola>http://pt.wikipedia.org/wiki/Guistola,
        Guistolinha>http://pt.wikipedia.org/wiki/Guistolinha,
        Lomba>http://pt.wikipedia.org/wiki/Lomba,
.
.
.

\end{code_txt}

\section{Gramática tradutora}

\begin{code_txt}
OrGeo     : Distritos { d = $1; }
          ;
\end{code_txt}

A estrutura \textsf{Distrito} é uma lista ligada que guarda a árvore de toda a informação contida no \textsf{OrGeo}.

\begin{code_txt}
Distritos : Distrito '|' { $$ = $1; }
          | Distritos Distrito '|' { $$ = catDistritos($1,$2); }
          ;
Distrito  : IdD Link Concelhos { $$ = addDistrito($1, $2, $3); }
          ;
\end{code_txt}

Os \textsf{Distritos} são uma lista ligada dos mesmos.\\ As funções \textsf{addDistrito} 

\begin{code_txt}
Concelhos : Concelho { $$ = $1; }
          | Concelhos ';' Concelho { $$ = catConcelhos($1, $3); }
          ;
Concelho  : Locais '!' IdC Link { $$ = addConcelho($1, $3, $4); }
          ;
\end{code_txt}

\begin{code_txt}
Locais    : Local { $$ = $1; }
          | Locais ',' Local { $$ = catFreguesias($1, $3); }
          ;
Link      : '>' l { $$ = $2; }
          ;
IdD       : id { $$ = $1; }
          ;
IdC       : id { $$ = $1; }
          ;
Local     : IdL Link { $$ = addFreguesia($1, $2); }
          ;
IdL       : id { $$ = $1; }
          ;
\end{code_txt}

\section{Conclusão}
Foi muito importante, depois de saber usar analisadores lexicos, termos aprendido uma ferramenta mais alto nível, com suporte a gramáticas.\\
Todos os conceitos dados nas aulas foram aplicados com sucesso neste trabalho final.\\
Devido á rapidez com que terminamos o trabalho ficamos com a sensação de que nos podia ter sido exigido mais.\\

O que aprendemos com esta cadeira foi de tal forma interessante que elementos do grupo aprofundaram conhecimentos nesta área e avançaram para outros geradores de compiladores, como o \textbf{ANTLR}.\\

Resumidamente achamos que na cadeira poderia ter sido dada mais importância á teoria de parsers, por forma a complementar esta parte prática.
\end{document}
